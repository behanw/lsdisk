#!/bin/bash
# Copyright 2019-2021 Behan Webster
# License: GPLv2+
#
# Will list all discovered storage devices, and they're various metadata.
# It will also enable showing where drives are located, as well as allow
# for easy drive location if the enclosure allows it.
#
# It uses LVM tools to find logical volumes: lvs, pvs, vgs
# It uses md tools to find RAID arrays: mdadm
# It uses megaraid tools to list HW RAID arrays: megaclisas-status
# It uses NVMe CLI tools to list NVMe drives: nvme
# It uses SAS tools to list SAS enclosures: sas2ircu
# It uses smartmontools to read SMART information: smartctl
# It uses LSI tools to list SAS enclosures: storcli64
# It uses ZFS tools to list pools: zpool
#
# Example /etc/lsdisk.conf
#
#  ENCLOSURE[0:0]=\
#  "2  5  8 11
#   1  4  7 10
#   0  3  6  9"
#
#  ENCLOSURE[M2]=\
#  " 0  1"
#
#  ENCLOSURE[NVME]=\
#  " 0  1"
#
#  ENCLOSURE[SATA]=\
#  " 0  1"
#
#  ENCLOSURE[USB]=\
#  " 0  1"

VERSION=3.1.1

set -e
set -u
set -o pipefail

declare -A BYSIZE LOC BOOT STATE MODEL FW SN ID TYPE META DRIVER HEALTH DEFECTS WEAR
declare -A MFG BAY DID DISKSIZE ENCLOSURE ALIAS INARRAY LSIARRAY ARRAYCOLOR
#declare -A PCI SLOTS IDS

BADDRIVE=${BADDRIVE:-} # For testing
CACHED=
COLOR=y
DEBUG=
DEMO=
PROGRESS=
QUIET=
TEST=
UNUSED="none"
CMD="${0##*/}"

CACHEDIR="$HOME/.cache/$CMD"
mkdir -p "$CACHEDIR"

################################################################################
usage() {
	cat <<-ENDHELP
	Version: v$VERSION
	Usage: $CMD [options] [commands]
	  -c,--cache     Use cached output of tools
	  -P,--progress  Show progress
	  -h,--help      This help
	  -q,--quiet     Less output
	  -V,--version   Show the version

	  locate sdX [start|stop]   Locate drive
	  unused                    Show only unused drives
	ENDHELP
	exit 0
}

################################################################################
in_path() {
	command -v "$@" >/dev/null 2>&1
}

################################################################################
info() {
	if [[ -z $QUIET ]] ; then
		echo -e "I:" "$@"
	fi
}

################################################################################
warn() {
	echo -e "${YELLOW_FG}W:" "$@" "$BACK"
}

################################################################################
error() {
	echo -e "${RED_FG}E:" "$@" "$BACK" >&2
	exit 1
}

################################################################################
debug() {
	if [[ -n $DEBUG ]] ; then
		echo -e "${CYAN_FG}D:" "$@" "$BACK" >&2
	fi
}

################################################################################
progress() {
	if [[ -n $PROGRESS ]] ; then
		if [[ -n $DEBUG ]] ; then
			echo -e "$BLUE_FG""$@""$BACK" >&2
		elif [[ $# -eq 0 ]] ; then
			echo >&2
		else
			echo -e -n "$BLUE_FG""$@"" $BACK" >&2
		fi
	fi
}

################################################################################
# Read local configuration file
CONF="/etc/lsdisk.conf"
if [[ -f $CONF ]] ; then
	# shellcheck disable=SC1090
	. "$CONF"
else
	warn "No $CONF found."
fi

################################################################################
# Parse optional parameters
while [[ $# -gt 0 ]] ; do
	case "$1" in
		-C|--cache) CACHED=y ;;
		--debug) DEBUG=y ;;
		--demo) DEMO=y ;;
		-nc|--nocolor|--no-color) COLOR= ;;
		-P|--progress) PROGRESS=y ;;
		-q|--quiet) QUIET=y ;;
		--test) TEST="echo" ;;
		--trace) set -x ;;
		-V|--version) echo "$CMD v$VERSION"; exit 0 ;;
		-h|--help) usage ;;
		*) break ;;
	esac
	shift
done

ARG=
if [[ $# -gt 0 ]] ; then
	ARG=$1
	shift
fi

################################################################################
if [[ -n $COLOR ]] ; then
	BLACK_FG='\e[30m'; RED_FG='\e[31m'; GREEN_FG='\e[32m'; YELLOW_FG='\e[33m'; BLUE_FG='\e[34m'; MAGENTA_FG='\e[35m'; CYAN_FG='\e[36m'
	RED_BG='\e[41m'; GREEN_BG='\e[42m'; YELLOW_BG='\e[43m'; BLUE_BG='\e[44m'; MAGENTA_BG='\e[45m'; CYAN_BG='\e[46m'; WHITE_BG='\e[47m'
	STANDOUT='\e[3m'; BLINK='\e[5m'; BACK='\e[0m'
else
	BLACK_FG=; RED_FG=; GREEN_FG=; YELLOW_FG=; BLUE_FG=; MAGENTA_FG=; CYAN_FG=
	RED_BG=; GREEN_BG=; YELLOW_BG=; BLUE_BG=; MAGENTA_BG=; CYAN_BG=; WHITE_BG=
	STANDOUT=; BLINK=; BACK=
fi

################################################################################
# Get by-id drive aliases
get_aliases() {
	local DISK=$1 D1 D2

	# shellcheck disable=SC2012
	read -r D1 D2 <<<"$(ls -l /dev/disk/by-id/[answ]* | awk "/$DISK\$/ {print \$9}" | sed 's|^.*/||' | paste - -)"
	if [[ $D1 =~ -eui\. || $D1 =~ ^wwn- ]] ; then
		ALIAS[$D1]="$D2"
		ID[$DISK]="$D2"
		debug "get_aliases: $DISK $D2 -> $D1"
	elif [[ $D2 =~ -eui\. || $D2 =~ ^wwn- ]] ; then
		ALIAS[$D2]="$D1"
		ID[$DISK]="$D1"
		debug "get_aliases: $DISK $D1 -> $D2"
	else
		ID[$DISK]="$D1"
		debug "get_aliases: $DISK $D1 ($D2)"
	fi
}

################################################################################
get_boot() {
	local DISK=$1 LABEL

	LABEL="$(fdisk -l "/dev/$DISK" 2>/dev/null | awk '/^Disklabel type:/ {print $3}')"
	BOOT[$DISK]="${LABEL:-$UNUSED}"
	if dd "if=/dev/$DISK" bs=4 skip=96 count=1 2>/dev/null | grep -q GRUB ; then
		debug "get_boot: $DISK:GRUB"
		BOOT[$DISK]+="+GRUB"
	fi
	if dd "if=/dev/$DISK" bs=4 skip=128 count=1 2>/dev/null | grep -q EFI ; then
		debug "get_boot: $DISK:EFI"
		BOOT[$DISK]+="+EFI"
	fi
}

################################################################################
# Guess the Manufacturer from string
guessmfg() {
	local STR=$1 NEW="UnknownMfg"
	shopt -s nocasematch
	case "$STR" in
		HGST*|HUH*) NEW="HGST" ;;
		IBM*) NEW="IBM" ;;
		INTEL*|MK*) NEW="Intel" ;;
		KINGSTON*|SandForce*) NEW="Kingston" ;;
		Samsung*) NEW="Samsung" ;;
		SEAGATE*|ST*) NEW="Seagate" ;;
		SSDSC*) NEW="Lenovo" ;;
		Western*|WDC*) NEW="WDC" ;;
		VIRTUAL*|IET*) NEW="Virtual" ;;
	esac
	shopt -u nocasematch
	debug "guessmfg: '$STR' -> '$NEW'"
	echo "$NEW"
}

################################################################################
# Set Manufacturer and Model
set_model() {
	local DISK=$1 MF=$2 MD=${3}
	if [[ -n $MF && ! $MF =~ Unknown ]] ; then
		MFG[$DISK]="$(guessmfg "$MF")"
	elif [[ -n $MD ]] ; then
		MFG[$DISK]="$(guessmfg "$MD")"
	fi
	debug "set_model: DISK=$DISK MFG=$MF -> ${MFG[$DISK]} MODEL=$MD"
	if [[ $MD =~ VIRTUAL ]] ; then
		MODEL[$DISK]="$MD"
	else
		MODEL[$DISK]="$(sed "s|^${MFG[$DISK]}||i" <<<"$MD")"
	fi
	debug "set_model: DISK=$DISK MFG=$MF -> ${MFG[$DISK]} MODEL=$MD -> ${MODEL[$DISK]}"
}

################################################################################
# Read SMART information
readsmart() {
	local DISK=$1 LID=${2:-} DRV CACHE
	CACHE="$CACHEDIR/$DISK-smartctl.txt"

	if [[ -n $CACHED && -f $CACHE ]] ; then
		cat "$CACHE"
		return 0
	fi

	for DRV in ${LID:+megaraid,$LID} "" usbjmicron sat scsi ata ; do
		#debug "readsmart: $DISK trying $DRV"
		local OUTPUT EXIT
		debug "smartctl -A -H -i ${DRV:+-d $DRV} /dev/$DISK"
		OUTPUT="$(smartctl -A -H -i ${DRV:+-d $DRV} "/dev/$DISK")"
		EXIT=$?
		if [[ $EXIT -eq 0 || $EXIT -eq 4 ]] ; then
			debug "Disk $DISK(${DRV:-default}): $EXIT\\n$OUTPUT\\n-------------------" >&2
			if [[ $EXIT -eq 0 ]] ; then
				echo -e "Driver: ${DRV:-default}\n$OUTPUT" | tee "$CACHE"
			else
				rm -f "$CACHE"
				echo -e "Driver: ${DRV:-default}\n$OUTPUT"
			fi
			return "$EXIT"
		fi
	done

	warn "No SMART information for $DISK"
}

################################################################################
# Get, and parse, SMART drive data
get_smart() {
	local DISK=$1 SIZE=$2 LID=${3:-}
	debug "get_smart: DISK:$DISK SIZE:$SIZE LID:$LID"
	in_path smartctl || error "smartctl not found. Install smartmontools"

	[[ -z ${HEALTH[$DISK]:-} ]] || return 0

	BYSIZE[$SIZE]+="$DISK "
	DISKSIZE[$DISK]="$SIZE"

	local MF M S1 S2 F T DRV H D W
	# shellcheck disable=SC2086
	read -r MF M S1 S2 F T DRV H D W <<<"$(readsmart "$DISK" "$LID" | awk -r '
		BEGIN {MFG="Unknown"; FW="-"; DEFECT=0};
		/^Driver:/ {DRIVER=$2};
		/^Vendor:/ {MFG=$2$3};
		/^Model Family:/ {MFG=$3$4};
		/^Device Model:/ {MODEL=$3$4$5$6$7$8};
		/^Device Model: *SSD/ {MODEL=$3};
		/^Model Number/ {MODEL=$3$4$5$6$7$8};
		/^Product:/ {MODEL=$2$3};
		/^Firmware Revision.*:/ {FW=$3};
		/^Firmware Version.*:/ {FW=$3};
		/^Revision.*:/ {FW=$2};
		/^Serial [Nn]umber:/ {SN=$3};
		/^NVMe Version:/ {TYPE="NVME"};
		/^Rotation Rate:.*Solid State/ {TYPE="SATA-SSD"};
		/^Rotation Rate:.*rpm/ {TYPE="SATA-HDD"};
		/^Transport protocol:.*SAS/ {TYPE="SAS-HDD"};
		/^SMART Health Status:/ {HEALTH=$4};
		/^SMART overall-health self-assessment test result:/ {HEALTH=$6};
		/^Elements in grown defect list:/ {DEFECT=$6};
		/^Percentage Used:/ {WEAR=$3};
		/Media_Wearout_Indicator/ {WEAR $10};
		END {print MFG" "MODEL" "SN" "substr(SN,0,8)" "FW" "TYPE" "DRIVER" "HEALTH" "DEFECT" "WEAR}')"
	debug "  get_smart: $DISK MF:$MF M:$M S1:$S1 S2:$S2 FW:$F T:$T DRV:$DRV H:$H D:$D W:$W"
	progress "$DISK"
	set_model "$DISK" "$MF" "$M"
	if [[ $M == "VIRTUAL-DISK" && ${ID[$DISK]} =~ ^scsi ]] ; then
		META[$DISK]="iscsi"
		# shellcheck disable=SC2012
		LOC[$DISK]="$(ls -l /dev/disk/by-path/*iscsi* | awk -F/ "/$DISK\$/ {print \$5}" | sed -e 's/:.*$//; s/^.*-//')"
		TYPE[$DISK]="iSCSI"
	else
		TYPE[$DISK]="$T"
	fi
	if [[ -n $S1 ]] ; then
		SN[$DISK]="$S1"
		SN[$S1]="$DISK"
		if [[ $S1 != $S2 && -n $S2 ]] ; then
			SN[$S2]="$DISK"
		fi
	fi
	FW[$DISK]="$F"
	DRIVER[$DISK]="$DRV"
	HEALTH[$DISK]="$H"
	DEFECTS[$DISK]="$D"
	WEAR[$DISK]="$W"
}

M2=0
SATA=0
USB=0

################################################################################
# Get, and parse, SMART drive data
get_meta() {
	local DISK=$1 CES

	if [[ -z ${LOC[$DISK]:-} && ${TYPE[$DISK]} =~ ^SATA ]] ; then
		if [[ ${DRIVER[$DISK]} =~ usb ]] ; then
			CES="USB:$USB"
			USB=$((USB + 1))
			TYPE[$DISK]="${TYPE[$DISK]}-USB"
		elif [[ ${ID[$DISK]} =~ M\.2 ]] ; then
			CES="M2:$M2"
			M2=$((M2 + 1))
			TYPE[$DISK]="${TYPE[$DISK]}-M.2"
		else
			CES="SATA:$SATA"
			SATA=$((SATA + 1))
		fi
		debug "get_meta: SATA LOC[$DISK]=$CES (${TYPE[$DISK]})"
		LOC[$DISK]="$CES"
		BAY[$CES]="$DISK"
	elif in_path nvme && nvme list | grep -q "/$DISK" ; then
		if [[ ${MODEL[$DISK]} =~ SSDPEK ]] ; then
			TYPE[$DISK]="NVME-Optane"
		else
			TYPE[$DISK]="NVME-SSD"
		fi
		CES="$(sed -E 's/n[0-9]+$//; s/^nvme/NVME:/' <<<"$DISK")"
		debug "get_meta: NVME $DISK $CES"
		LOC[$DISK]="$CES"
		BAY[$CES]="$DISK"
	fi

	debug "  get_meta: DISK=$DISK TYPE=${TYPE[$DISK]:--} LOC=${LOC[$DISK]:--} BAY=${BAY[$DISK]:--}"
}

################################################################################
# Record drive sizes from lsblk
get_blk_devs() {
	local ROOT DISK SIZE SWAP
	ROOT=$(lsblk -i | awk '/^sd/ {DISK=$1}; / \/$/ {print DISK}')
	while read -r DISK SIZE SWAP ; do
		if [[ $DISK == "$ROOT" ]] ; then
			INARRAY[$DISK]=root
		elif [[ $DISK =~ ^sr ]] ; then
			INARRAY[$DISK]=dvd
			TYPE[$DISK]=DVD
		elif [[ $DISK =~ - ]] ; then
			DISK="$(sed -e 's/^.*-//; s/p[0-9]*$//' <<<"$DISK")"
			if [[ -n $SWAP ]] ; then
				debug "get_blk_devs: $DISK $SIZE $SWAP"
				META[$DISK]="swap"
				INARRAY[$DISK]="swap"
				if swapon -s | grep -q "/dev/$DISK" ; then
					STATE[$DISK]="Active"
				fi
			fi
			continue
		fi

		get_aliases "$DISK"
		get_boot "$DISK"
		get_smart "$DISK" "$SIZE"
		get_meta "$DISK"

	done <<<"$(lsblk -i | awk '/^[ns|`]/ {print $1" "$4" "$7}' | grep -v ^sr)"
	progress
}

################################################################################
# Enumerate ceph drive
get_ceph_devs() {
	in_path ceph || return 0

	local DISK OSD
	while read -r DISK OSD ; do
		[[ -n $DISK ]] || continue
		DISK="${DISK#*-}"
		DISK="${DISK%[0-9]*}"
		OSD="${OSD##*/}"
		debug "get_ceph_devs: DISK:$DISK OSD:$OSD"
		INARRAY[$DISK]="${OSD/ceph-/osd-}"
		META[$DISK]=ceph
		STATE[$DISK]="$(ceph status | awk '/health:/ {print $2}')"
	done <<<"$(lsblk --ascii | awk '/ceph\// {print $1" "$7}')"
}

################################################################################
# Enumerate SAS drive bay enclosures with sas2ircu
get_sas_devs() {
	in_path sas2ircu || return 0

	local CTRL E S T M K F N1 N2 ST DISK CES
	for CTRL in $(sas2ircu list | awk 'NR>8 && /^ *[0-9]+/ {print $1}') ; do
		while read -r E S T M K F N1 N2 ST ; do
			#DISK="${SN[$N1]:-${SN[$N2]}}"
			debug "get_sas_devs: ENC:$E SLOT:$S TYPE:$T MFG:$M MODEL:$K FW:$F SN1:$N1 SN2:$N2 ST:$ST"
			DISK="${SN[$N1]:-${SN[$N2]}}"
			CES="$CTRL:$E:$S"
			debug "get_sas_devs: DISK:$DISK CES:$CES TYPE:$T MFG:$M MODEL:$K FW:$F SN1:$N1 SN2:$N2 ST:$ST"
			#info "get_sas_devs: LOC[$DISK]=$CES"
			LOC[$DISK]="$CES"
			BAY[$CES]="$DISK"
			[[ -n ${TYPE[$DISK]} ]] || TYPE[$DISK]="$T"
			#MFG[$DISK]="$M"
			#[[ -n ${MODEL[$DISK]} ]] || MODEL[$DISK]="$K"
			FW[$DISK]="$F"
			STATE[$DISK]="$ST"
		done <<<"$(awk '
			/Device is a Hard disk/ {ENC=""; SLOT=""};
			/Enclosure.*:/ {ENC=$4};
			/Slot.*:/ {SLOT=$4};
			/Manufacturer.*:/ {MFG=$3};
			/Model Number.*:/ {MODEL=$4$5};
			/Firmware Revision.*:/ {FW=$4};
			/Serial No.*:/ {SN=$4};
			/State.*:/ {STATE=$3$4};
			/Drive Type.*:/ {TYPE=$2; print ENC" "SLOT" "TYPE" "MFG" "MODEL" "FW" "SN" "substr(SN,0,8)" "STATE};
			' <<<"$(sas2ircu "$CTRL" DISPLAY)")"
	done
}

################################################################################
# Enumerate MegaRAID arrays with megaclisas-status
get_megacli_arrays() {
	in_path megaclisas-status || return 1

	local LINE P S1 S2 S3 A S D SER
	while read -r LINE ; do
		if [[ $LINE =~ ^c[0-9]+u[0-9]+p[0-9]+ ]] ; then
			read -r P S1 S2 S3 <<<"$(awk '{print $1" "$5" "$6" "$7}' <<<"$LINE")"
			A="${LSIARRAY[${P%p*}]}"
			debug "get_megacli_arrays: $P:$S1:$S2:$S3"
			if [[ $S1 = SEAGATE && $S2 =~ ^ST ]] ; then
				SER="${S3:4:16}"
			elif [[ $S1 =~ ^WD- ]] ; then
				SER="${S1:0:15}"
			else
				SER="${S1:0:8}"
			fi
			debug "get_megacli_arrays: $A -> $SER"
			SN[$A]="$SER"
			SN[$SER]="$A"
		elif [[ $LINE =~ ^c[0-9]u[0-9] ]] ; then
			read -r A S D <<<"$(awk '{print $1" "$14" "$16}' <<<"$LINE")"
			debug "get_megacli_arrays: $A -> $D"
			LSIARRAY[$A]="${D##*/}"
			STATE[${D##*/}]="$S"
		fi
	done <<<"$(megaclisas-status)"
}

################################################################################
# Enumerate LSI/MegaRAID drive bay enclosures with storcli64
get_lsi_devs() {
	in_path storcli64 || return 0
	get_megacli_arrays || return 0

	pushd "${TMPDIR:-/tmp}" >/dev/null
	local CTRL C S D SZ T M K F N ST DISK CES
	while read -r C S D SZ T M K F N ST ; do
		debug "get_lsi_devs: CTRL:$C SLOT:$S DID:$D SIZE:$SZ TYPE:$T MFG:$M MODEL:$K FW:$F SN:$N STATE:$ST"
		DISK="${SN[$N]:-${SN[${N:0:16}]:-${SN[${N:0:8}]}}}"
		[[ -z ${LOC[$DISK]:-} ]] || continue
		DID[$DISK]="$D"
		get_smart "$DISK" "$SZ" "$D"
		[[ -z $C ]] || CTRL=$C
		CES="$CTRL:$S"
		debug "get_lsi_devs: DISK:$DISK CES:$CES STATE:$ST SN:$N"
		#info "get_lsi_devs: LOC[$DISK]=$CES"
		LOC[$DISK]="$CES"
		BAY[$CES]="$DISK"
		TYPE[$DISK]="$T"
		#MFG[$DISK]="$M"
		#[[ -n ${MODEL[$DISK]} ]] || MODEL[$DISK]="$K"
		FW[$DISK]="$F"
		STATE[$DISK]="$ST"
	done <<<"$(awk '
		/^Controller =/ {CTRL=$3};
		/^[0-9]+:/ {SLOT=$1; DID=$2; STATE=$3; DG=$4; SIZE=$5$6; TYPE=$7"_"$8};
		/^SN =/ {SN=$3};
		/^Manufacturer Id =/ {MFG=$4};
		/^Model Number =/ {MODEL=$4$5};
		/^Firmware Revision =/ {FW=$4;
		print CTRL" "SLOT" "DID" "SIZE" "TYPE" "MFG" "MODEL" "FW" "SN" "STATE};
		' <<<"$(storcli64 /call/eall/sall show all nolog)")"
	rm -f storcli.log storelibdebugit.txt storelibdebugit.txt.1
	popd >/dev/null
	progress
}

################################################################################
# Enumerate physical drives (PVs) in LVM Volume Groups
get_lvm_devs(){
	in_path vgs || return 0

	local DISK ARRAY
	while read -r DISK ARRAY ; do
		if [[ $DISK =~ /dev/ ]] ; then
			DISK="$(sed -E 's|^/dev/||; s|[0-9]+$||' <<<"$DISK")"
			debug "get_lvm_devs: $DISK in $ARRAY"
			META[$DISK]="lvm"
			INARRAY[$DISK]="$(lvs -o vg_name,lv_name | awk 'NR>1 {print $1"-"$2}' | grep -m1 "$ARRAY-")"
			STATE[$DISK]="Online"
		fi
	done <<<"$(pvs -o pv_name,vg_name 2>/dev/null | tail -n +2)"
}

################################################################################
# Enumerate drives in mdadm arrays
get_mdadm_devs() {
	if ! in_path mdadm ; then
		return 0
	elif [[ ! -d /dev/md ]] ; then
		debug "No mdadm arrays found"
		return 0
	fi

	local ARRAY
	while read -r ARRAY ; do
		debug "get_mdadm_devs: $ARRAY"
		local NUM MAJ MIN DEV S1 S2 DISK
		# shellcheck disable=SC2034
		while read -r NUM MAJ MIN DEV S1 S2 DISK ; do
			if [[ $DISK =~ /dev/ ]] ; then
				DISK="$(sed -E 's|^/dev/||; s|[0-9]+$||' <<<"$DISK")"
				debug "get_mdadm_devs: $DISK in $ARRAY ($S1/$S2)"
				META[$DISK]="mdadm"
				INARRAY[$DISK]="${ARRAY##*/}"
				STATE[$DISK]="$S1/$S2"
			fi
		done <<<"$(mdadm --detail "$ARRAY")"
	done <<<"$(find /dev/md -mindepth 1 -maxdepth 1)"
}

################################################################################
# Enumerate drives in zfs zpool arrays
get_zpool_devs() {
	in_path zpool || return 0

	local ARRAY ST DISK
	for ARRAY in $(zpool list | grep -v -e "no pools available" -e ^NAME | awk '{print $1}') ; do
		ST=
		while read -r LINE ; do
			DISK=$(awk '{print $1}' <<<"$LINE" | sed -e 's/-part.*$//')
			[[ -n ${DISK:-} ]] || continue
       			if [[ $DISK =~ ^sd ]] ; then
				DISK="${DISK%%[0-9]*}"
			fi
			if [[ $LINE =~ logs$ ]] ; then
				ST="zil"
			elif [[ $LINE =~ cache$ ]] ; then
				ST="l2arc"
			elif [[ $LINE =~ spares$ ]] ; then
				ST="spare"
			elif [[ $LINE =~ nvme- || $LINE =~ ^wwn- ]] ; then
				if [[ -n ${ALIAS[$DISK]:-} ]] ; then
					DISK="${ALIAS[$DISK]}"
				fi
				META[$DISK]="zfs"
				INARRAY[$DISK]="$ARRAY${ST:+-$ST}"
				STATE[$DISK]="$(awk '{print $2}' <<<"$LINE")"
				debug "get_zpool_devs: $DISK -> $ARRAY (${STATE[$DISK]}) => $LINE"
			elif [[ $LINE =~ scsi- ]] ; then
				META[$DISK]="zfs"
				INARRAY[$DISK]="$ARRAY${ST:+-$ST}"
				STATE[$DISK]="$(awk '{print $2}' <<<"$LINE")"
				debug "get_zpool_devs: $DISK -> $ARRAY (${STATE[$DISK]})"
			elif [[ $LINE =~ [a-zA-Z0-9]+.*AVAIL ]] ; then
				META[$DISK]="zfs"
				INARRAY[$DISK]="$ARRAY${ST:+-$ST}"
				STATE[$DISK]="AVAIL"
			elif [[ $LINE =~ [a-zA-Z0-9]+.*ONLINE ]] ; then
				META[$DISK]="zfs"
				INARRAY[$DISK]="$ARRAY${ST:+-$ST}"
				STATE[$DISK]="ONLINE"
			fi
		done <<<"$(zpool status "$ARRAY")"
	done
}

################################################################################
# Determine the type of the storage device
disk2type() {
	local DISK=$1
	if [[ -z $DISK ]] ; then
		error "disk2type: Empty disk"
		return 1
	fi
	echo "${TYPE[$DISK]:-Empty}"
}

################################################################################
# Determine how the drive is being used
disk2meta() {
	local DISK=$1 I=${ID[$DISK]}
	if [[ -n ${META[${I:-0}]:-} ]] ; then
		echo "${META[$I]}"
	elif [[ -n ${META[${DISK:-0}]:-} ]] ; then
		echo "${META[$DISK]}"
	else
		echo "$UNUSED"
	fi
}

################################################################################
# Determine which array a drive is a part of if applicable
disk2array() {
	local DISK=$1 I=${ID[$DISK]:-0}
	if [[ -n ${INARRAY[${I:-0}]:-} ]] ; then
		echo  "${INARRAY[$I]}"
	elif [[ -n ${INARRAY[${DISK:-0}]:-} ]] ; then
		echo "${INARRAY[$DISK]}"
	else
		echo "noarray"
	fi
}

################################################################################
# Get the operational state of the drive
getstate() {
	local DISK=$1
	if [[ -n $DISK ]] ; then
		if [[ -n ${ID[$DISK]} ]] ; then
			local IDX="${ID[$DISK]}"
			if [[ -n ${STATE[$IDX]:-} && ${STATE[$IDX]:-} != Ready ]] ; then
				echo "${STATE[$IDX]}"
				return 0
			fi
		fi
		if [[ -n ${STATE[$DISK]:-} && ${STATE[$DISK]:-} != Ready ]] ; then
			echo "${STATE[$DISK]}"
			return 0
		fi
	fi
	echo '-'
}

################################################################################
uniq-list() {
	local ARRAY
	mapfile -d '' ARRAY < <(printf '%s\0' "$@" | sort -zu)
	# shellcheck disable=SC2068
	echo ${ARRAY[@]}
}

################################################################################
# Obfuscate serial numbers for demo mode
obfuscate() {
	if [[ -n $DEMO ]] ; then
		sed -E 's/[A-Z0-9]{7,}/XXXXXXXX/g; s/-[A-Z0-9a-z]{16,}/-XXXXXXXXXXXX/g'
	else
		cat 
	fi
}

################################################################################
# Deterine if drive is okay
is_okay() {
	local DISK=$1 FAIL=0

	if [[ $DISK == $BADDRIVE ]] ; then
		warn "Marking $DISK as bad" >&2
		return 1
	fi

	shopt -s nocasematch
	case "${STATE[$DISK]:-ONLINE}" in
		active*|HEALTH_OK|ONLINE|Onln|Ready*|-) >/dev/null;;
		*) warn "$DISK failed state (${STATE[$DISK]:-})"; FAIL=1;;
	esac

	case "${HEALTH[$DISK]:-OK}" in
		OK|PASSED|0|-) >/dev/null;;
		*) warn "$DISK failed health (${HEALTH[$DISK]:-})"; FAIL=1;;
	esac
	shopt -u nocasematch

	debug "is_okay: DISK=$DISK STATE=${STATE[$DISK]:-} HEALTH=${HEALTH[$DISK]:-} FAIL=$FAIL"
	return $FAIL
}

################################################################################
# Assign colors to array names
get_colors() {
	#local FGCOLORS=("$BLACK_FG" "$RED_FG" "$GREEN_FG" "$YELLOW_FG" "$BLUE_FG" "$MAGENTA_FG" "$CYAN_FG")
	local BGCOLORS=("$GREEN_BG$BLACK_FG" "$YELLOW_BG$BLACK_FG" "$BLUE_BG" "$MAGENTA_BG$BLACK_FG" "$CYAN_BG$BLACK_FG" "$WHITE_BG$BLACK_FG" "$RED_BG")

	ARRAYCOLOR["noarray"]=""
	local ARRAY NUM=0
	for ARRAY in $(uniq-list "${INARRAY[@]}") ; do
		if [[ -n ${ARRAYCOLOR[${ARRAY%-*}]:-} ]] ; then
			ARRAYCOLOR[$ARRAY]="${ARRAYCOLOR[${ARRAY%-*}]}"
		else
			ARRAYCOLOR[$ARRAY]="${BGCOLORS[$NUM]}"
			ARRAYCOLOR[${ARRAY%-*}]="${BGCOLORS[$NUM]}"
			NUM=$((NUM+1))
		fi
		#echo -e "get_colors: ${ARRAYCOLOR[$ARRAY]}$ARRAY$BACK" 2>&1
	done
}

################################################################################
# Optional color for drives
disk_color() {
	local DISK=$1 ARRAY CLR

	ARRAY="$(disk2array "$DISK")"
	debug "disk_color: DISK=$DISK ARRAY=$ARRAY COLOR=${ARRAYCOLOR[$ARRAY]:-}"
	CLR="${ARRAYCOLOR[$ARRAY]:-}"
	if ! is_okay "$DISK" ; then
		CLR+="$STANDOUT"
	fi
	echo "$CLR"
}

################################################################################
# List and sort all of the discovered drives
listdrives() {
	local SHOWDID=""
	DID[hack]=1
	unset DID[hack]
	[[ ${#DID[@]} -eq 0 ]] || SHOWDID="y"

	info "listdrives"
	( [[ -n $QUIET ]] || echo "Disk: Size: Type: Boot: Kind: Array: Loc: Mfg: Model: FW: Serial: By-id: State: Health: Defects: Wear: ${SHOWDID:+DID:}"
	local DISK CLR= LEN
	for DISK in "${!TYPE[@]}" ; do
		LEN="0${#DISK}"
		CLR="$(disk_color "$DISK")"
		echo -e "${LEN:0:2}$DISK $CLR$DISK ${DISKSIZE[$DISK]} $(disk2type "$DISK") ${BOOT[$DISK]:--} $(disk2meta "$DISK") $(disk2array "$DISK") ${LOC[$DISK]:-$UNUSED} ${MFG[$DISK]:--} ${MODEL[$DISK]:--} ${FW[$DISK]:--} ${SN[$DISK]:--} ${ID[$DISK]:--} $(getstate "$DISK") ${HEALTH[$DISK]:--} ${DEFECTS[$DISK]:--} ${WEAR[$DISK]:--} ${SHOWDID:+${DID[$DISK]:--}}$BACK"
	done | sort | cut -d' ' -f2- ) | obfuscate | column -t
}

################################################################################
# Show the location of the drives based on ENCLOSURES from /etc/lsdisk.conf
show_bays() {
	if [[ -z "${!ENCLOSURE[*]}" ]] ; then
		warn "No ENCLOSURES defined in $CONF"
		return
	fi

	info "show_bays"
	local ENC ROW B DISK CLR
	for ENC in $(uniq-list "${!ENCLOSURE[@]}") ; do
		echo -e "Enclosure: $ENC"
		while read -r ROW ; do
			#echo "$ENC -> $ROW"
			for B in $ROW ; do
				if [[ $B =~ [A-Z] ]] ; then
					echo -e -n "$BLUE_FG$B:NA$BACK "
				else
					#echo "B:" $ENC:$B ${BAY[$ENC:$B]}"
					DISK="${BAY[$ENC:$B]:-}"
					if [[ -n $DISK ]] ; then
						CLR="$(disk_color "$DISK")"
						echo -e -n "$CLR$B:$DISK:$(disk2type "$DISK"):${DISKSIZE[$DISK]}$BACK "
					else
						echo -e -n "$YELLOW_FG$B:Empty$BACK "
					fi
				fi
			done
			echo
		done <<<"${ENCLOSURE[$ENC]}" | column -t | sed -e 's/^/    /'
	done
}

################################################################################
# Flash a location LED on the drive if possible
locatedrive() {
	local TOOL DISK ST CTRL ENC SLOT
	[[ $# -gt 0 ]] || usage

	case "$1" in
		sas) TOOL=sas2ircu; shift ;;
		lsi) TOOL=storcli64; shift ;;
	esac
	DISK=$1
	case "${2:-ON}" in 
		on|On|ON|start|Start|START|begin|Begin|BEGIN|true|True|TRUE) ST=ON ;;
		off|Off|OFF|stop|Stop|STOP|end|End|END|false|False|FALSE) ST=OFF ;;
		*) error "Invalid locate value: $2"
	esac

	if [[ -n ${TOOL:-} ]] && ! in_path "$TOOL" ; then
		error "$TOOL not found in PATH"
	elif in_path sas2ircu ; then
		TOOL=sas2ircu
	elif in_path storcli64 ; then
		TOOL=storcli64
	else
		error "No enclosure tool found (sas2ircu nor storcli64)"
	fi
	if [[ $TOOL == storcli64 ]] ; then
		if [[ $ST == ON ]] ; then
			ST=start
		else
			ST=stop
		fi
	fi

	IFS=: read -r CTRL ENC SLOT <<<"${LOC[$DISK]}"
	[[ $CTRL =~ [0-9] ]] || error "No locate LED for $DISK in ${LOC[$DISK]}"

	echo "Use $TOOL to locate $DISK (${LOC[$DISK]}) $ST"
	case "$TOOL" in
		sas2ircu)
			$TEST sas2ircu "$CTRL" LOCATE "$ENC:$SLOT" "$ST" | grep ^SAS2IRCU ;;
		storcli64)
			$TEST storcli64 "/c$CTRL/e$ENC/s$SLOT" "$ST" locate
			rm -f storcli.log storelibdebugit.txt storelibdebugit.txt.1 ;;
		*) error "I don't know how to locate $DISK" ;;
	esac
}

################################################################################
# gawk is used rather a lot, so make sure it is available
if ! in_path gawk ; then
	error "gawk not installed"
fi

################################################################################
# Look for drives on this computer
get_lsi_devs
get_blk_devs
get_sas_devs
get_lvm_devs
get_mdadm_devs
get_ceph_devs
get_zpool_devs
get_colors
[[ -z $BADDRIVE ]] || warn "Setting $BADDRIVE as bad for testing" >&2
#echo "${!ARRAYCOLOR[@]}" >&2
#echo "${!INARRAY[@]}" >&2

################################################################################
if [[ $ARG == locate ]] ; then
	locatedrive "$@"
else
	(
		if [[ $ARG == unused ]] ; then
			listdrives | grep $UNUSED
		else
			listdrives
		fi
		show_bays
	) | ${PAGER:-less -RS}
fi
